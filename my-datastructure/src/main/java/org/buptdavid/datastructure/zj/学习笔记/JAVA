        /*int a=1000;
        int b=1000;
        System.out.println(a==b);*//*不考虑[-128,127] 始终返回true*//*
        Integer a1=128;
        Integer b1=128;
        System.out.println(a1==b1);*//*考虑[-128,127] 在区间之内返回true，否则返回false*//*
        Integer a2=new Integer(1000);
        int b2=1000;
        System.out.println(a2==b2);*//*不考虑[-128,127] 始终返回true，因为int与Integer有自动装箱和拆箱功能*//*
        Integer a3=new Integer(8);
        Integer b3=8;
        System.out.println(a3==b3);*//*不考虑[-128,127] 始终返回false，Integer是包装类*//*
        Integer a4=new Integer(1000);
        Integer b4=new Integer(1000);
        System.out.println(a4==b4);*//*不考虑[-128,127] 始终返回false，Integer是包装类*//*
        Integer a5=1;
        int b5=1;
        System.out.println(a5==b5);*//*不考虑[-128,127] 始终返回true，因为int与Integer有自动装箱和拆箱功能*/





  Synchronized 的底层实现

  monitorenter
  每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：
  	1、如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。
  	2、如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1.
  	3.如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。


  monitorexit
  指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。


  通过这两段描述，我们应该能很清楚的看出Synchronized的实现原理，Synchronized的语义底层是通过一个monitor的对象来完成，其实wait/notify等方法也依赖于monitor对象，
  这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。




  加上Synchronized的方法的同步并没有通过指令monitorenter和monitorexit来完成（理论上其实也可以通过这两条指令来实现），不过相对于普通方法，其常量池中多了ACC_SYNCHRONIZED标示符。JVM就是根据该标示符来实现方法的同步的：当方法调用时，调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。
  其实本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码来完成。


   线程池设置参数：
   1、CPU密集型（任务少，但是运算量大的） CPU核数+1线程     Runtime.getRuntime().availableProcessors();//当前机器的cpu核数
   2、IO密集型 1） cpu核数*2    2）大部分线程都阻塞，需要多配置线程数 参考公式：CPU核数/(1-阻塞系数)  阻塞系数在0.8—0.9之间  比如8核CPU： 8/(1-0.9)=80个线程数


    如何减少线程上下文切换?
        1. 减少锁的使用，能用CAS代替锁的情况，尽量用CAS代替。
        2. 减少线程的数量 。

