
Innodb存储引擎
	工作方式（工作主要是使用后台的1个master线程来完成的）:将数据库文件按页（每页16k）读取到缓冲池，然后按照最近使用最少的LRU算法来保留到缓冲池中的数据
		如果修数据库文件需要修改。首先修改缓冲池的数据，然后再按照一定的频率刷新缓冲池里面脏页（修改过就属于脏页）刷新到文件。
	后台线程有7个，4个io（1个read，1个log，1个write,1个insert buffer ）
	1个master 1个lock  1个error
	内存包括：
		缓冲池（占最大内存块），重做日志缓冲池，额外的内存池
	缓冲池里面的数据页的类型有（索引页，数据页，undo页等），
现在我们清楚了InnoDB中主键索引B+树是如何组织数据、查询数据的，我们总结一下：
		1、InnoDB存储引擎的最小存储单元是页，页可以用于存放数据也可以用于存放键值+指针，在B+树中叶子节点存放数据，非叶子节点存放键值+指针。
		2、索引组织表通过非叶子节点的二分查找法以及指针确定数据在哪个页中，进而在去数据页中查找到需要的数据；
		那么回到我们开始的问题，通常一棵B+树可以存放多少行数据？
		这里我们先假设B+树高为2，即存在一个根节点和若干个叶子节点，那么这棵B+树的存放总记录数为：根节点指针数*单个叶子节点记录行数。
		上文我们已经说明单个叶子节点（页）中的记录数=16K/1K=16。（这里假设一行记录的数据大小为1k，实际上现在很多互联网业务数据记录大小通常就是1K左右）。
		那么现在我们需要计算出非叶子节点能存放多少指针，其实这也很好算，我们假设主键ID为bigint类型，长度为8字节，而指针大小在InnoDB源码中设置为6字节，这样一共14字节，我们一个页中能存放多少这样的单元，其实就代表有多少指针，即16384/14=1170。那么可以算出一棵高度为2的B+树，能存放1170*16=18720条这样的数据记录。
		根据同样的原理我们可以算出一个高度为3的B+树可以存放：1170*1170*16=21902400条这样的记录。所以在InnoDB中B+树高度一般为1-3层，它就能满足千万级的数据存储。在查找数据时 一次页的查找代表一次IO， 所以通过主键索引查询通常 只需要1-3次IO操作 即可查找到数据。



MyISAM与InnoDB的区别？
1、InnoDB支持事务，MyISAM不支持，对于InnoDB每一条SQL语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条SQL语言放在begin和commit之间，组成一个事务；
2、InnoDB支持外键，而MyISAM不支持。对一个包含外键的InnoDB表转为MYISAM会失败；
3、
    3.1）InnoDB是聚集索引，使用B+Tree作为索引结构，数据文件是和（主键）索引绑在一起的（表数据文件本身就是按B+Tree组织的一个索引结构），
    必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。
    3.2） MyISAM是非聚集索引，也是使用B+Tree作为索引结构，索引和数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。

    也就是说：InnoDB的B+树主键索引的叶子节点就是数据文件，辅助索引的叶子节点是主键的值；而MyISAM的B+树主键索引和辅助索引的叶子节点都是数据文件的地址指针。
    （ps MyISAM 有 MYI索引文件 和 MYD数据文件。MYI就是索引文件，底层使用B+Tree 结构，MYI的叶子节点存储的是MYD数据文件的地址指针，所以会通过MYI找到MYD数据文件对应的数据）
    （ps Innodb 有IDB索引数据文件，底层也是使用B+Tree 因为主键与数据文件绑定在一起，叶子节点存放的就是数据文件）
4、 InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快（注意不能加有任何WHERE条件）；
    那么为什么InnoDB没有了这个变量呢？
        因为InnoDB的事务特性，在同一时刻表中的行数对于不同的事务而言是不一样的，因此count统计会计算对于当前事务而言可以统计到的行数，而不是将总行数储存起来方便快速查询。InnoDB会尝试遍历一个尽可能小的索引除非优化器提示使用别的索引。如果二级索引不存在，InnoDB还会尝试去遍历其他聚簇索引。
        如果索引并没有完全处于InnoDB维护的缓冲区（Buffer Pool）中，count操作会比较费时。可以建立一个记录总行数的表并让你的程序在INSERT/DELETE时更新对应的数据。和上面提到的问题一样，如果此时存在多个事务的话这种方案也不太好用。如果得到大致的行数值已经足够满足需求可以尝试SHOW TABLE STATUS
5、Innodb不支持全文索引，而MyISAM支持全文索引，在涉及全文索引领域的查询效率上MyISAM速度更快高；PS：5.7以后的InnoDB支持全文索引了
6、MyISAM表格可以被压缩后进行查询操作
7、InnoDB支持表、行(默认)级锁，而MyISAM支持表级锁
8、InnoDB表必须有唯一索引（如主键）（用户没有指定的话会自己找/生产一个隐藏列Row_id来充当默认主键），而Myisam可以没有
9、Innodb存储文件有frm、ibd，而Myisam是frm、MYD、MYI
      Innodb：frm是表定义文件，ibd是数据文件
      Myisam：frm是表定义文件，myd是数据文件，myi是索引文件


如何选择：
    1. 是否要支持事务，如果要请选择innodb，如果不需要可以考虑MyISAM；
    2. 如果表中绝大多数都只是读查询，可以考虑MyISAM，如果既有读也有写，请使用InnoDB。
    3. 系统奔溃后，MyISAM恢复起来更困难，能否接受；
    4. MySQL5.5版本开始Innodb已经成为Mysql的默认引擎(之前是MyISAM)，说明其优势是有目共睹的，如果你不知道用什么，那就用InnoDB，至少不会差。
InnoDB为什么推荐使用自增ID作为主键？
    答：自增ID可以保证每次插入时B+索引是从右边扩展的，可以避免B+树和频繁合并和分裂（对比使用UUID）。如果使用字符串主键和随机主键，会使得数据随机插入，效率比较差。
innodb引擎的4大特性
       插入缓冲（insert buffer),二次写(double write),自适应哈希索引(ahi),预读(read ahead)

2. MVCC基础 MVCC (MultiVersion Concurrency Control) 叫做多版本并发控制。
InnoDB的 MVCC ，是通过在每行记录的后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存了行的过期时间，当然存储的并不是实际的时间值，而是系统版本号。
MVCC在mysql中的实现依赖的是undo log与read view
   ① undo log :undo log 中记录某行数据的多个版本的数据。
   ② read view :用来判断当前版本数据的可见性

SQL 语句性能优化策略
地址：https://mp.weixin.qq.com/s?__biz=MjM5MzA0OTkwMA==&mid=2651200418&idx=1&sn=ffc9581943ee2923fc1eae0e01519897&chksm=bd6e47e18a19cef771688eff1324e1c92e6d2623e242f00c4654aa72081aa2e630a8e9e56560&mpshare=1&scene=23&srcid=1208s1jQ58alcJMM44Ti9O8v&sharer_sharetime=1614325346211&sharer_shareid=9bfb4994053a5e601756b95c9a69ea1f#rd

1、对查询进行优化，应尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引

2、应尽量避免在where子句中对字段进行null值判断，创建表时NULL是默认值，但大多数时候应该使用NOT NULL，或者使用一个特殊的值，如0，-1作为默认值。

3、应尽量避免在where子句中使用!=或<>操作符，MySQL只有对以下操作符才使用索引：<，<=，=，>，>=，BETWEEN，以及某些时候的LIKE。

4、应尽量避免在where子句中使用or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，可以使用UNION合并查询：select id from t where num=10 union all select id from t where num=20。

5、in和not in也要慎用，否则会导致全表扫描，对于连续的数值，能用between就不要用in了：Select id from t where num between 1 and 3。

6、下面的查询也将导致全表扫描：select id from t where name like‘%abc%’或者select id from t where name like‘%abc’若要提高效率，可以考虑全文检索。而select id from t where name like‘abc%’才用到索引。

7、如果在where子句中使用参数，也会导致全表扫描。

8、应尽量避免在where子句中对字段进行表达式操作，应尽量避免在where子句中对字段进行函数操作。

9、很多时候用exists代替in是一个好的选择：select num from a where num in(select num from b)。用下面的语句替换：select num from a where exists(select 1 from b where num=a.num)。

10、索引固然可以提高相应的select的效率，但同时也降低了insert及update的效率，因为insert或update时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。

11、应尽可能的避免更新clustered索引数据列， 因为clustered索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新clustered索引数据列，那么需要考虑是否应将该索引建为clustered索引。

12、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。

13、尽可能的使用varchar/nvarchar代替char/nchar，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。

14、最好不要使用”“返回所有：select from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。

15、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。

15、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。

16、使用表的别名(Alias)：当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个Column上。这样一来，就可以减少解析的时间并减少那些由Column歧义引起的语法错误。

17、使用“临时表”暂存中间结果 ：
简化SQL语句的重要方法就是采用临时表暂存中间结果，但是临时表的好处远远不止这些，将临时结果暂存在临时表，
后面的查询就在tempdb中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。

18、一些SQL查询语句应加上nolock，读、写是会相互阻塞的，为了提高并发性能，对于一些查询，可以加上nolock，这样读的时候可以允许写，但缺点是可能读到未提交的脏数据。
使用nolock有3条原则：
查询的结果用于“插、删、改”的不能加nolock；
查询的表属于频繁发生页分裂的，慎用nolock ；
使用临时表一样可以保存“数据前影”，起到类似Oracle的undo表空间的功能，能采用临时表提高并发性能的，不要用nolock
19、常见的简化规则如下：
不要有超过5个以上的表连接（JOIN），考虑使用临时表或表变量存放中间结果。少用子查询，视图嵌套不要过深，一般视图嵌套不要超过2个为宜。

20、将需要查询的结果预先计算好放在表中，查询的时候再Select。这在SQL7.0以前是最重要的手段，例如医院的住院费计算。

21、尽量使用exists代替select count(1)来判断是否存在记录，count函数只有在统计表中所有行数时使用，而且count(1)比count(*)更有效率。

...




MYSQL 三大日志   原文地址：https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&mid=2651497002&idx=2&sn=487a4c92a6c52d692e6e4d0edaec8ad8&chksm=bd25ce558a524743706f3440395f5cdefa5dc717a439372d5fe7a0b09dcadd7b63805389686d&mpshare=1&scene=23&srcid=0719Gy09tawdTcFhgSJhH9KO&sharer_sharetime=1626658519851&sharer_shareid=9bfb4994053a5e601756b95c9a69ea1f#rd
    1、binlog
        binlog 用于记录数据库的执行写入性操作，以二进制的形式记录到磁盘当中。
        binlog 是逻辑日志，底层是server层进行记录，以任何存储引擎的mysql都会记录binlog日志

        binlog 是以追加的方式进行写入的，每个binlog文件的大小可以通过设置max_binlog_size 参数来设置文件大小，超过这个大小会生成新的binlog文件。
        ➤ binlog使用场景
            1)在master端开启binlog，然后将binlog文件同步给slave端，slave端拿到binlog执行从而达到同步数据
            2)数据恢复 ：通过使用 mysqlbinlog 工具来恢复数据。
        ➤ binlog刷盘时机
            对于 InnoDB 存储引擎而言，只有在事务提交时才会记录biglog ，此时记录还在内存中，那么 biglog是什么时候刷到磁盘中的呢？
            mysql 通过 sync_binlog 参数控制 biglog 的刷盘时机，取值范围是 0-N：
            0：不去强制要求，由系统自行判断何时写入磁盘；
            1：每次 commit 的时候都要将 binlog 写入磁盘；
            N：每N个事务，才会将 binlog 写入磁盘。
            MySQL 5.7.7之后版本的默认值1
        ➤ binlog日志格式
               STATMENT：基于SQL 语句的复制( statement-based replication, SBR )，每一条会修改数据的sql语句会记录到binlog 中  。
                   优点：不需要记录每一行的变化，减少了 binlog 日志量，节约了  IO  , 从而提高了性能；
                   缺点：在某些情况下会导致主从数据不一致，比如执行sysdate() 、  slepp()  等 。
               ROW：基于行的复制(row-based replication, RBR )，不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了 。
                   优点：不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题 ；
                   缺点：会产生大量的日志，尤其是` alter table ` 的时候会让日志暴涨
               MIXED：基于STATMENT 和 ROW 两种模式的混合复制(mixed-based replication, MBR )，一般的复制使用STATEMENT 模式保存 binlog ，对于 STATEMENT 模式无法复制的操作使用 ROW 模式保存 binlog
    2、redo log
        ➤ 为什么需要redo log？
            我们都知道，事务的四大特性里面有一个是 持久性 ，具体来说就是只要事务提交成功，那么对数据库做的修改就被永久保存下来了，不可能因为任何原因再回到原来的状态 。
            那么 mysql是如何保证一致性的呢？
                最简单的做法是在每次事务提交的时候，将该事务涉及修改的数据页全部刷新到磁盘中。但是这么做会有严重的性能问题，主要体现在两个方面：
                    1)因为 Innodb 是以 页 为单位进行磁盘交互的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，太浪费资源了！
                    2)一个事务可能涉及修改多个数据页，并且这些数据页在物理上并不连续，使用随机IO写入性能太差！
                因此 mysql 设计了 redo log ， 具体来说就是只记录事务对数据页做了哪些修改，这样就能完美地解决性能问题了(相对而言文件更小并且是顺序IO)。

        ➤ redo log基本概念
            redo log 包括两部分：一个是内存中的日志缓冲( redo log buffer )，另一个是磁盘上的日志文件( redo logfile)。

            Mysql 每执行一条 DML 语句，先将记录写入 redo log buffer，后续某个时间点再一次性将多个操作记录写到 redo log file。这种 先写日志，再写磁盘 的技术就是 MySQL
            里经常说到的 WAL(Write-Ahead Logging) 技术。

            mysql 支持三种将 redo log buffer 写入 redo log file 的时机，可以通过 innodb_flush_log_at_trx_commit 参数配置
                ➀ 0 延迟写  事务提交时不会将redo log buffer  中日志写入到os buffer ，而是每秒写入os buffer 并调用fsync() 写入到redo log file 中，简单点就是每秒刷新写入磁盘
                ➁ 1 实时写 实时刷   也就是事务提交就会实时刷到磁盘
                ➂ 2 实时写延迟刷
        ➤ redo log记录形式
            redo log实际上记录数据页的变更，而这种变更记录是没必要全部保存，因此redo log实现上采用了大小固定，循环写入的方式，当写到结尾时，会回到开头循环写日志
    3、undo log
      数据库事务四大特性中有一个是原子性，具体来说就是 原子性是指对数据库的一系列操作，要么全部成功，要么全部失败，不可能出现部分成功的情况。
      实际上，原子性底层就是通过undo log实现的。undo log主要记录了数据的逻辑变化，比如一条INSERT语句，对应一条DELETE的undo log，对于每个UPDATE语句，对应一条相反的UPDATE的undo log，这样在发生错误时，就能回滚到事务之前的数据状态。

    binlog与 redo log 的区别
                    binlog                                                   redo log
        文件大小    可通过 max_binlog_size 参数设置                            固定大小

        实现方式    通过底层的server来实现，所有引擎都有                     InnerDb 引擎才有

        记录方式    通过在文件后面追加的方式                                采用循环写的方式记录，当写到结尾时，会回到开头循环写日志

        使用场景    主从复制和数据恢复                                        适用于奔溃恢复




explain使用+慢SQL分析

一、开启慢查询日志，捕获慢SQL
    1）查看mysql是否开启慢查询日志
    SHOW VARIABLES LIKE '%slow_query_log%';
    2）开启慢查询日志
    set GLOBAL slow_query_log=1;
    3) 查看慢查询日志阙值,也就是超时时间,这个值表示超过多长时间的SQL语句会被记录到慢查询日志中
    show [GLOBAL] variables like '%long_query_time%';
    4）设置慢查询日志阙值
    SET GLOBAL long_query_time=3;
    5）查看多少SQL语句超过了阙值
    show GLOBAL status like '%Slow_queries%';
    6）MySQL提供的日志分析工具mysqldumpslow
         进入MySQL的安装目录中的bin目录下，执行 ./mysqldumpslow --help 查看帮助命令
         常用参考：
          得到返回记录集最多的10个SQL
          mysqldumpslow -s r -t 10 slow.log
          得到访问次数最多的10个SQL
          mysqldumpslow -s c -t 10 slow.log
          得到按照时间排序的前10条里面含有左连接的查询语句
          mysqldumpslow -s t -t 10 -g "left join" slow.log
          使用这些语句时结合| more使用



二、explain+慢SQL分析
使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是 如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈。
使用方式：Explain+SQL语句





















SQL 语句：
查询到多行并到一块，使用group by
select pid,GROUP_CONCAT(name) as name FROM t_test GROUP BY pid




