什么时候执行MinorGC？什么时候执行FullGC？
	虚拟机会判断老年代中连续的空闲空间是否大于新生代所有的对象的总空间
	1、如果大于，直接MinorGC
	2、如果小于，再判断是否开启handlerPromotionFailure,没有开启直接Full GC
	3，如果开启HandlerPromotionFailure，JVM会判断老年代连续空间是否大于历次晋升的大小，如果小于直接执行Full GC,如果大于执行MinorGC



-Xms 初始堆空间 =-XX:initialHeapSize     默认是根据系统运行内存的64分之一
-Xmx 初始堆空间最大值 =-XX:MaxHeapSize    默认是根据系统运行内存的4分之一
-Xss 初始栈空间
jinfo -flag 参数名 进程号
java -XX:+PrintFlagsInitial 出厂初始化的
java -XX:+PrintFlagsFinal   自己改过的   有冒号的代表人为改过的值

java -XX:+PrintCommandLineFlags -version
        -XX:InitialHeapSize=134217728 -XX:MaxHeapSize=2147483648 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:
        +UseParallelGC

        可以查看jvm使用的垃圾回收器


JVM参数类型
    1、标配参数
    2、X参数
    3、XX参数 1）boolean类型  -XX:(+/-)属性  ，2）KV设值类型 -XX:属性key=属性值value


2、打印GC的详细信息：
-XX:+PrintGCDetails
解释：打印GC详细信息。
-XX:+PrintGCTimeStamps



[GC (Allocation Failure) [PSYoungGen: 2048K->512K(2560K)] 2048K->848K(9728K), 0.0018557 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]


GC在新生代
FullGC在老年代

修改新生代里面的（eden，from,to）的分配(默认就是8  )
-XX:SurvivorRatio=4
eden space 29184K, 1% used [0x00000000d5580000,0x00000000d55c90d0,0x00000000d7200000)
from space 7168K, 0% used [0x00000000d7200000,0x00000000d7200000,0x00000000d7900000)
to   space 7168K,
4:1:1(默认是8:1:1)
-XX:SurvivorRatio=4
(4:1:1)
-XX:SurvivorRatio=5
(5:1:1)
-XX:SurvivorRatio=6
(6:1:1)
-XX:SurvivorRatio=8
(8:1:1)


修改新生代和老年代的分配(默认就是2 )
-XX:NewRatio=2
(1:2)
-XX:NewRatio=3
(1:3)
-XX:NewRatio=4
(1:4)


设置垃圾最大年龄
-XX:MaxTenuringThreshold=15  (默认是15) 当这个设置为0时，直接进入老年代，（设置也只能设置[0-15]之间）




垃圾回收
Serial(串行) Parallel(并行) CMS(并发) G1 jdk11之后有ZGC

Serial(单线程)
ParNew（复制算法）就是Serial的多线程版本

Parallel Scavenge收集器
    是一个新生代的收集器，使用复制算法，又是并行多线程收集器

并行开启-XX:+ParallelRefProcEnabled 并且调大了并行标记的线程-XX:ConcGCThreads，以及增加了-XX:G1HeapRegionSize

Serial Old 是Serial老年代版本，同样是一个单线程收集器，使用标记整理算法

Parallel Old 是Parallel Scavenge收集器的老年代版本，是一个多线程的标记整理，这个收集器是在JDK  1. 6中才开始提供的。

CMS（基于标记清除算法） ( Concurrent  Mark  Sweep)收集器是一种以获取最短回收停顿时间为目标的收集
器。GC工作线程与用户线程可以并发执行 以此来达到降低收集停顿时间的目的。 CMS收集器仅作用于老年代的收集， 目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重
视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常
符合这类应用的需求。


G1收集器（当前收集器发展最前沿的成果之一）
并行与并发
    G1能充分利用多cpu，多环境下的硬件优势，使用多cpu来缩短停顿时间
分代收集
    与其他收集器一样，分代概念在G1中得以保留，虽然G1可以不需要其他收集器配合就能独立的管理整个GC堆，
    他是通过采用不同的方式去处理创建的对象和已经存活已久的对象

空间整合
    与CMS的“标记一清理”算法不同，G1从整体来看是基于“标记一整理”算法实
    现的收集器，从局部(两个Re乡on之间)上来看是基于“复制”算法实现的，但无论如何，这
    两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种
    特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一
    次GC。







常量池

     简介：
        常量池可以比喻为Class文件里的资源仓库，它是Class文件结构中与其他项目关联最多的数据，通常也是占用Class文件空间最大的数据项目之一。常量池中主要存放两大类常量：字面量(Literal)和符号引用(Symbolic References)。




判断对象是否可以回收
    1、引用计数器算法，对象被其他地方引用，就不能被标记为回收
    2、可达性分析算法，一系列GCROOT ，如果对象与Gcroot有连接，说明对象不能被回收，如果没有连接，对象也并不是一定被回收，因为还有“拯救阶段”（两阶段标记），
        还需要判断对象是否覆盖finalize()方法，如果没有覆盖，直接标记为可回收，否则对象将会被放在一个叫F-Q的队列里面，由一个低优先级的后台线程finalize线程来执行finalize()方法。线程只是执行这个方法，不会阻塞等待方法执行完毕。
        对象在执行finalize()方法，如果在此方法里面有引用链，那么对象就会逃过标记可回收，否则就会被回收





什么时候执行MinorGC？什么时候执行FullGC？
	虚拟机会判断老年代中连续的空闲空间是否大于新生代所有的对象的总空间
	1、如果大于，直接MinorGC
	2、如果小于，再判断是否开启handlerPromotionFailure,没有开启直接Full GC
	3，如果开启HandlerPromotionFailure，JVM会判断老年代连续空间是否大于历次晋升的平均大小，如果小于直接执行Full GC,如果大于执行MinorGC









Class 类文件结构
    Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地
排列在Class文件之中，中间没有添加任何分隔符



类加载机制
        什么情况下需要开始类加载过程的第一个阶段:加载?Java虚拟机规范中并没有进行强
    制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于初始化阶段，虚拟机规范则
    是严格规定了有且只有5种情况必须立即对类进行“初始化”(而加载、验证、准备自然需要
    在此之前开始):
        1)遇到new, getstatic, putstatic或invokestatic这4条字节码指令时，如果类没有进行过初
    始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是:使用new关键字
    实例化对象的时候、读取或设置一个类的静态字段(被final修饰、已在编译期把结果放人常
    量池的静态字段除外)的时候，以及调用一个类的静态方法的时候。
        2)使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，
    则需要先触发其初始化。
        3)当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父
    类的初始化。
        4)当虚拟机启动时，用户需要指定一个要执行的主类(包含main)方法的那个
    类)，虚拟机会先初始化这个主类。
        5)当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF-getStatic, REF}utStatic, REF_ invokeStatic的方法句柄，并且这个方法句柄
          所对应的类没有进行过初始化，则需要先触发其初始化。

类加载过程
        接下来我们详细讲解一下Java虚拟机中类加载的全过程，也就是加载、验证、准备、解析和初始化这5个阶段所执行的具体动作。

   1、加载
        类加载过程的一个阶段，ClassLoader通过一个类的完全限定名查找此类字节码文件，并利用字节码文件创建一个class对象。使用 BinaryViewer软件查看字节码文件，其开头均为 CAFE BABE ，如果出现不合法的字节码文件，那么将会验证不通过。
  2、 验证
        目的在于确保class文件的字节流中包含信息符合当前虚拟机要求，不会危害虚拟机自身的安全，主要包括四种验证：文件格式的验证，元数据的验证，字节码验证，符号引用验证。
   3、准备
        为类变量（static修饰的字段变量）分配内存并且设置该类变量的初始值，（如static int i = 9 这里只是将 i 赋值为0，在初始化的阶段再把 i 赋值为9)，这里不包含final修饰的static ，因为final在编译的时候就已经分配了。这里不会为实例变量分配初始化，类变量会分配在方法区中，实例变量会随着对象分配到Java堆中。
   4、解析
            解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，符号引用在前一章讲
        解Class文件格式的时候已经出现过多次，在Class文件中它以CONSTANT Class info,
        CONSTANT Fieldref info, CONSTANT Methodref info等类型的常量出现，那解析阶段中所说的直接引用与符号引用又有什么关联呢?
            符号引用(Symbolic  References ):符号引用以一组符号来描述所引用的目标，符号可
        以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的
        内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各
        不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义
        在Java虚拟机规范的Class文件格式中。
            直接引用(Direct References ):直接引用可以是直接指向目标的指针、相对偏移量或是
        一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，同一个符号引
        用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目
        标必定已经在内存中存在。
    5、初始化（赋值）
        这里是类记载的最后阶段，如果该类具有父类就进行对父类进行初始化，执行其静态初始化器（静态代码块）和静态初始化成员变量。（前面已经对static 初始化了默认值，这里我们对它进行赋值，成员变量也将被初始化）
        类记载器的任务是根据类的全限定名来读取此类的二进制字节流到 JVM 中，然后转换成一个与目标类对象的java.lang.Class 对象的实例，在java 虚拟机提供三种类加载器，引导类加载器，扩展类加载器，系统类加载器。


forName和loaderClass区别?
    Class.forName()得到的class是已经初始化完成的。
    Classloader.loaderClass得到的class是还没有链接（验证，准备，解析三个过程被称为链接）的。

双亲委派模型
       1、工作原理
            如果一个类收到了类加载的请求，它并不会自己先去加载，而是把这个请求委托给父类加载器去执行，
            如果父类加载器还存在父类加载器，则进一步向上委托，依次递归，请求最后到达顶层的启动类加载器，
            如果父类能够完成类的加载任务，就会成功返回，倘若父类加载器无法完成任务，子类加载器才会尝试自己去加载，这就是双亲委派模式。就是每个儿子都很懒，遇到类加载的活都给它爸爸干，直到爸爸说我也做不来的时候，儿子才会想办法自己去加载。
        2、优势
            java类和它的类加载器一起具备优先级的层次关系，例如java.lang.Object,它存放在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给启动类加载器加载
            ，因此，Object类在各种类加载器环境中都是同一个类，相反，如果，没有双亲委派模型的话，由各个类加载器自行加载，如果开发者自己写个Object放到classpath中，那系统将会出现多个Object





