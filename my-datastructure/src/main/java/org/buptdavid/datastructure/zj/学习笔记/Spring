Spring的两种动态代理：Jdk和Cglib 的区别和实现

一、原理区别：

java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。

而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。

1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP
2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP

3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换

如何强制使用CGLIB实现AOP？
 （1）添加CGLIB库，SPRING_HOME/cglib/*.jar
 （2）在spring配置文件中加入<aop:aspectj-autoproxy proxy-target-class="true"/>

JDK动态代理和CGLIB字节码生成的区别？
 （1）JDK动态代理只能对实现了接口的类生成代理，而不能针对类
 （2）CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法
   因为是继承，所以该类或方法最好不要声明成final






spring的3级缓存【DefaultSingletonBeanRegistry】
 所谓的3级缓存其实就是spring内部3个用来解决spring循环依赖的3个Map。
源码：
 public class DefaultSingletonBeanRegistry extends SimpleAliasRegistry implements SingletonBeanRegistry {
     protected static final Object NULL_OBJECT = new Object();
     protected final Log logger = LogFactory.getLog(this.getClass());
     private final Map<String, Object> singletonObjects = new ConcurrentHashMap(256);//---------1级缓存    放入的是已经经历了完整的生命周期的bean。
     private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap(16);//---------3级缓存   放入的是生成bean的工厂。
     private final Map<String, Object> earlySingletonObjects = new HashMap(16);//----------------2级缓存   表示bean的生命周期还没走完（bean的属性还没填充），就把这个bean存入缓存中，也就是bean实例化了，但是还没有初始化 这样的bean
     private final Set<String> registeredSingletons = new LinkedHashSet(256);
     private final Set<String> singletonsCurrentlyInCreation = Collections.newSetFromMap(new ConcurrentHashMap(16));
     private final Set<String> inCreationCheckExclusions = Collections.newSetFromMap(new ConcurrentHashMap(16));
     private Set<Exception> suppressedExceptions;
     private boolean singletonsCurrentlyInDestruction = false;
     private final Map<String, Object> disposableBeans = new LinkedHashMap();
     private final Map<String, Set<String>> containedBeanMap = new ConcurrentHashMap(16);
     private final Map<String, Set<String>> dependentBeanMap = new ConcurrentHashMap(64);
     private final Map<String, Set<String>> dependenciesForBeanMap = new ConcurrentHashMap(64);

     public DefaultSingletonBeanRegistry() {
     }
     ...


     一级缓存：存放已经经历了完整的生命周期的Bean对象。
     二级缓存：存放早期暴露出来的Bean对象，生命周期还没有结束。
     三级缓存：存放可以生成Bean的工厂 。
     注意：只有单利的Bean会通过3级缓存来解决循环依赖的问题，不是单利的，每次容器中都会从容器中获取到一个新的对象，重新创建，所以不是单利的bean是没有缓存的，不会将其放到3级缓存中去。


@Autowired原理
    用例子总结：
    @Autowired
    private BookService bookService;
    总结：autowired 为组件自动赋值，自动查找ioc容器，找到就赋值，查找的方式是从类型寻找，有可能找到多个，比如说有一个继承于要查找的类，如果是多个就按照变量名作为id继续匹配
    举例说：查找到多个相同的类是BookService 和 BookServiceExtend,这 个 时候会根据你要查找的bookservice 来查找id,BookService 的id默认是bookservice，BookServiceExtend的id默认是bookServiceExtend,一查找就只匹配上BookService 类了
    如果现在把例子该了：改成bookService2了
    @Autowired
    private BookService bookService2;
    Spring容器先查找BookService类，一找就找到两个类（BookService 和BookServiceExtend），然后查找id，发现都不匹配，会直接报错
    这个时候诞生了@Qualifier注解，让spring不使用bookService2作为id去查找，而是使用一个比如说bookService去查找,作为新的id去查找
    @Qualifier（"bookService"）
    @Autowired
    private BookService bookService2;
    @Qualifier注解找不到就报错，找到就装配

    所以发现Autowired标注的自动装配的属性默认是一定装配上的，找到就装配，找不到就拉倒
    可以在Autowired(request = false)默认是true，找不到就会报错，置为false后，找不到会置为null
    @Qualifier（"bookService"）
    @Autowired（request=false）
    private BookService bookService2;
    方法上有@Autowired的话，对于参数的类型是引入进来的，import进来的：
    1）、这个方法也会在bean创建的时候自动运行
    2）、这个方法上的每一个参数都会自动注入值





 【18 道经典 Spring 面试题】 需要看  https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&mid=2651507399&idx=2&sn=786189d4dffb85ffe8cfaa64159d73c5&chksm=bd25a6b88a522fae9977a7fc202b9cbdb17081b654a7ad0cfc02725dff092fe0452a74d34ea9&mpshare=1&scene=23&srcid=1224Dtsh2NOhaWFSpIKYVcgF&sharer_sharetime=1640327441347&sharer_shareid=9bfb4994053a5e601756b95c9a69ea1f#rd

  小结
  spring4 AOP执行顺序：
      正常情况下：环绕方法前->@Before前置通知--->执行方法-->环绕方法后-->@After后置通知----->@AfterRunning正常返回
      异常情况下：环绕方法前->@Before前置通知----->执行方法(异常)-->@After后置通知----->@AfterThrowing方法异常

  spring5 AOP执行顺序：
        正常情况下：
           我是环绕通知之前AAA
           ********@Before我是前置通知
           ===>CalcServiceImpl被调用，计算结果为：5
           ********@AfterReturning我是返回后通知
           ********@After我是后置通知
           我是环绕通知之后BBB
        异常情况下：
            我是环绕通知之前AAA
            ********@Before我是前置通知
            ********@AfterThrowing我是异常通知
            ********@After我是后置通知
            java.lang.ArithmeticException: / by zero
 面试题
    你肯定知道spring，那说说aop的全部通知顺序springboot或springboot2对aop的执行顺序影响？
