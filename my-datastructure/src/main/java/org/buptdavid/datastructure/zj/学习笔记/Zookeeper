ZAB协议内部原理
阶段一、 发现
    阶段一主要就是Leader选举过程、用于在多分布式进程中选举出主进程，准Leader和Follower的工作流程分别如下。
        1、Follower F 将自己最后接受的事务Proposal的epoch值发送给准Leader L（消息Fe）。
        2、准Leader L 接受到来自过半的F的消息Fe后，准Leader L会生成e`（过半F里面的epoch值+1，就是e`）发送给这些过半的F
        3、F接受到来自准L的e`消息后，如果检查自己接受的e比e`还要小，就会把自己的e的值更新为e`。同时想这个准L返回ack消息（这个反馈的ack消息中，包含了当前该F的epoch和该F的历史事务Proposal集合hf）。
        4、当准L接受到来自过半的F反馈的ack消息后，准L就会从这过半的F中选出一个F，并使用其的he作为自己的初始化事务集合的Ie`。



阶段二、同步
    在完成发现阶段流程之后，就会进入同步阶段，在这一阶段中，Leader L 和Follower F 的工作流程如下。
        1、L会将e`和Ie`（暂且记为M21）发送给所有的Quorum（过半机制）中的F。
        2、当F接受到来自L的消息（M21）后，如果F发现自己的e!=e`,那么会直接进入下一轮循环，此时F发现自己还在上一轮或者更上一轮，无法参与本轮的同步。
            如果e==e`，那么F就会执行事务的应用操作，具体的，每个事务Proposal p属于Ie`,F都会接受，最后F会反馈给L（暂且称为消息M22），表明自己接受并处理了所有的Ie`中事务。
        3、当L接受到来自过半的F的M22消息后，就会向所有的F发送commit消息。

阶段三、广播
    完成同步阶段之后，ZAB协议 就可以正式开始接受客户端新的事务请求，并进行消息广播流程。
        1、L接受到客户端新的事务请求后，就会生成对应的事务Proposal P，并更加ZXID的顺序向所有F发送提案e`<v,z>。
        2、F根据消息接受的先后顺序来处理这些来自L的事务P，并将它们追加到hf中，之后再反馈给L。
        3、当L接受到来自过半的F针对事务e`<v,z>的ack之后，就会发送commit消息给所有的F，要求它们进行事务的提交。
        4、当F接受到L的commit消息后，就会开始进行事务的提交。
